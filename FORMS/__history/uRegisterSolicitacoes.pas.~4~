unit uRegisterSolicitacoes;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants, 
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  uRegister, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, FMX.TabControl, FMX.Controls.Presentation,
  FMX.ListView.Types, FMX.ListView.Appearances, FMX.ListView.Adapters.Base,
  FMX.ListView, FMX.Memo.Types, FMX.ListBox, FMX.ScrollBox, FMX.Memo,
  FMX.DateTimeCtrls, FMX.Edit;

type
  TSolicitacao = record
    codigo, tipo : integer;
    assunto, situacao : string;
  end;
  TfrmRegisterSolicitacoes = class(TfrmRegister)
    lvSolicitacoes: TListView;
    Panel1: TPanel;
    lDescricao: TLabel;
    lAssunto: TLabel;
    lTipo: TLabel;
    pManutencao: TPanel;
    lmEquipamento: TLabel;
    lmStatus: TLabel;
    ComboBox1: TComboBox;
    lmDataAbertura: TLabel;
    lmPrevisaoFechamento: TLabel;
    Edit1: TEdit;
    DateEdit1: TDateEdit;
    DateEdit2: TDateEdit;
    Edit2: TEdit;
    Memo1: TMemo;
    ComboBox2: TComboBox;
    lbHTipo: TListBoxGroupHeader;
    lbAlocacao: TListBoxItem;
    lbEmprestimo: TListBoxItem;
    lbManutencao: TListBoxItem;

  private
    { Private declarations }
  public
    { Public declarations }
    function  buscarNoBanco(solicitacao : TSolicitacao) : TSolicitacao;
    procedure inserirNoBanco(solicitacao : TSolicitacao);
    procedure atualizarNoBanco(solicitacao : TSolicitacao);
    procedure removerNoBanco(cod_solicitacao : Integer);
    procedure listarDoBanco();

    function preencherParamFromQuery(solicitacao : TSolicitacao; query : TFDQuery) : TSolicitacao;
    function preencherFieldFromQuery(solicitacao : TSolicitacao; query : TFDQuery) : TSolicitacao;

    procedure inserirNaLista(solicitacao : TSolicitacao);
  end;

var
  frmRegisterSolicitacoes: TfrmRegisterSolicitacoes;

implementation

{$R *.fmx}

procedure TfrmRegisterSolicitacoes.atualizarNoBanco(solicitacao: TSolicitacao);
begin

end;

function TfrmRegisterSolicitacoes.buscarNoBanco(
  solicitacao: TSolicitacao): TSolicitacao;
begin

end;

procedure TfrmRegisterSolicitacoes.inserirNaLista(solicitacao: TSolicitacao);
begin
  with lvSolicitacoes.Items.Add do
  begin
    TListItemText(Objects.FindDrawable('txtCodigo')).Text := IntToStr(solicitacao.codigo);
    TListItemText(Objects.FindDrawable('txtAssunto')).Text := solicitacao.assunto;
    TListItemText(Objects.FindDrawable('txtTipo')).Text := IntToStr(solicitacao.tipo);
    TListItemText(Objects.FindDrawable('txtSituacao')).Text := solicitacao.situacao;
  end;
end;

procedure TfrmRegisterSolicitacoes.inserirNoBanco(solicitacao: TSolicitacao);
begin
  FDQueryRegister.Close;
  FDQueryRegister.SQL.Clear;

  FDQueryRegister.SQL.Add('INSERT INTO solicitacoes');
  FDQueryRegister.SQL.Add('(assunto, situacao, tipo)');
  FDQueryRegister.SQL.Add('VALUES(:assunto, :situacao, :tipo)');

  solicitacao.codigo := -1;
  solicitacao.situacao := 'Aberto';
  preencherParamFromQuery(solicitacao, FDQueryRegister);

  FDQueryRegister.ExecSQL;
end;

procedure TfrmRegisterSolicitacoes.listarDoBanco;
var vSolicitacao : TSolicitacao;
begin
  FDQueryRegister.Close;
  FDQueryRegister.SQL.Clear;

  FDQueryRegister.SQL.Add('SELECT * FROM solicitacoes');

  FDQueryRegister.Open();

  FDQueryRegister.First;

  lvSolicitacoes.Items.Clear;

  while not FDQueryRegister.Eof do
  begin
    vSolicitacao := preencherFieldFromQuery(vSolicitacao, FDQueryRegister);

    inserirNaLista(vSolicitacao);

    FDQueryRegister.Next;
  end;
end;

function TfrmRegisterSolicitacoes.preencherFieldFromQuery(
  solicitacao: TSolicitacao; query: TFDQuery): TSolicitacao;
begin

end;

function TfrmRegisterSolicitacoes.preencherParamFromQuery(
  solicitacao: TSolicitacao; query: TFDQuery) : TSolicitacao;
begin
  if solicitacao.codigo <> -1 then
  begin
    query.ParamByName('codigo').AsInteger := solicitacao.codigo;
  end;
  query.ParamByName('assunto').AsString := solicitacao.assunto;
  query.ParamByName('situacao').AsString := solicitacao.situacao;
  query.ParamByName('tipo').AsInteger := solicitacao.tipo;

  Result := solicitacao;
end;

procedure TfrmRegisterSolicitacoes.removerNoBanco(cod_solicitacao: Integer);
begin

end;

end.
